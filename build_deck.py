#!/usr/bin/env python3

import argparse
from collections import Counter
import datetime
import hashlib
import os
import subprocess
import urllib.request

import genanki
import numpy as np
from PIL import Image
from wikidata.client import Client
from wikidata.datavalue import DatavalueError

CLIENT = Client()
SUBDIVISIONS = CLIENT.get('P150')
LOCATOR_MAP_IMAGE = CLIENT.get('P242')
INCEPTION = CLIENT.get('P571')
DISSOLVED = CLIENT.get('P576')


def get_subdivisions(entity, date=None):
    if date is None:
        date = datetime.date.today()

    subdivisions = entity.getlist(SUBDIVISIONS)
    for subdivision in subdivisions:
        try:
            inception = subdivision.get(INCEPTION)
        except DatavalueError:
            inception = None # TODO: fix wikidata package to handle dates better
        try:
            dissolved = subdivision.get(DISSOLVED)
        except DatavalueError:
            dissolved = None
        if inception and inception > date:
            continue
        if dissolved and dissolved < date:
            continue
        yield subdivision


def get_locator_map_url(entity):
    try:
        maps = entity.getlist(LOCATOR_MAP_IMAGE)
    except:
        maps = []
    urls = [i.image_url for i in maps]
    svg_urls = [url for url in urls if url.endswith('.svg')]
    if svg_urls:
        return svg_urls[0]
    en_label = entity.label['en']
    if urls:
        print(f'No SVG map for {en_label}: {" ".join(urls)}')
        return urls[0]
    print(f'No map for {en_label}')
    return None


def download_locator_map(url, filename):
    if url.endswith('.svg'):
        origin_map = filename + '.svg'
        raster_map = filename + '.png'
    else:
        origin_map = filename + '.' + url.split('.')[-1]
        raster_map = origin_map
    with urllib.request.urlopen(url) as map_file:
        map_data = map_file.read()
    with open(origin_map, 'wb') as f:
        f.write(map_data)
    if origin_map.endswith('.svg'):
        print(f'Converting {origin_map} to {raster_map}')
        subprocess.run(['rendersvg', origin_map, raster_map])
    return origin_map, raster_map


def create_background_map(raster_maps, region_label):
    raster_maps = [Image.open(i) for i in raster_maps]
    common_size = Counter(i.size for i in raster_maps).most_common(1)[0][0]
    raster_maps = [i for i in raster_maps if i.size == common_size]
    if len(raster_maps) == 1:
        print("Can't infer background from only a single map.")
        return None
    stacked_maps = np.array([np.array(i) for i in raster_maps])
    median = np.median(stacked_maps, axis=0)
    background = Image.fromarray(np.array(median, dtype=stacked_maps.dtype))
    filename = region_label + '.png'
    background.save(filename)
    return filename


REGION_SUBDIVISION_MODEL = genanki.Model(
    1175192202, # generated by random.randrange(1 << 30, 1 << 31)
    'Subdivison of a Region',
    fields=[
        {'name': 'Subdivision'},
        {'name': 'Region'},
        {'name': 'SubdivisionMap'},
        {'name': 'RegionMap'},
    ],
    templates=[
        {
            'name': 'Name from Map',
            'qfmt':
                '''
                    <div id="region">{{Region}}</div>
                    <div id="subdivision">?</div>
                    <hr>
                    {{SubdivisionMap}}
                ''',
            'afmt':
                '''
                    <div id="region">{{Region}}</div>
                    <div id="subdivision">{{Subdivision}}</div>
                    <hr>
                    {{SubdivisionMap}}
                ''',
        },
        {
            'name': 'Map from Name',
            'qfmt':
                '''
                    <div id="region">{{Region}}</div>
                    <div id="subdivision">{{Subdivision}}</div>
                    <hr>
                    {{RegionMap}}
                ''',
            'afmt':
                '''
                    <div id="region">{{Region}}</div>
                    <div id="subdivision">{{Subdivision}}</div>
                    <hr>
                    {{SubdivisionMap}}
                ''',
        },
    ],
    css='''
        .card {
            font-size: 20px;
            text-align: center;
        }
        #region {
            color: gray;
        }
        #subdivision {
            font-size: 30px;
        }
    ''',
)


class RegionSubdivisionNote(genanki.Note):
    @property
    def guid(self):
        return genanki.guid_for(*self.fields[:2])


DECK_ID_BASE = 1290639408 # generated by random.randrange(1 << 30, 1 << 31)


def main(argv):
    parser = argparse.ArgumentParser(
        description='Generate Anki geography deck from Wikidata')
    parser.add_argument('region')
    parser.add_argument('--language', default='en')
    args = parser.parse_args(argv[1:])

    region = CLIENT.get(args.region, load=True)
    region_label = region.label[args.language]
    subdivision_maps = {}
    for subdivision in get_subdivisions(region):
        locator_map_url = get_locator_map_url(subdivision)
        if locator_map_url is None:
            continue
        subdivision_label = subdivision.label[args.language]
        subdivision_maps[subdivision_label] = download_locator_map(locator_map_url, subdivision_label)
    background_map = create_background_map(
        [raster for origin, raster in subdivision_maps.values()],
        region_label
    )

    region_hash = hashlib.sha512(region_label.encode('utf-8')).digest()
    region_hashsum = np.fromstring(region_hash, dtype=np.int32).sum()
    possible_ids = range(1 << 30, 1 << 31)
    deck_id = possible_ids[(DECK_ID_BASE + region_hashsum) % len(possible_ids)]
    deck_name = f'Administrative Subdivisions of {region_label}'
    deck = genanki.Deck(deck_id, deck_name)

    media_files = [background_map]
    for subdivision_label, maps in subdivision_maps.items():
        smallest_map = min(maps, key=lambda path: os.stat(path).st_size)
        media_files.append(smallest_map)
        deck.add_note(
            RegionSubdivisionNote(
                model=REGION_SUBDIVISION_MODEL,
                fields=[
                    subdivision_label,
                    region_label,
                    f'<img src="{smallest_map}">',
                    f'<img src="{background_map}">',
                ]
            )
        )

    package = genanki.Package(deck, media_files)
    package.write_to_file(deck_name + '.apkg')

if __name__ == '__main__':
    import sys
    main(sys.argv)
